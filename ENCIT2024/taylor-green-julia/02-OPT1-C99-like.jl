#!/usr/bin/env julia

#----------------------------------------------------------------------------------------------#
#                                        Case Constants                                        #
#----------------------------------------------------------------------------------------------#

# Simulation data type
const ùïã                 = Float64                 # Source optimization 1 (=SO1)

# Lattice constants
const scale             = UInt(1) << 0            # 1 << n = 2^n (SO1)
const chunk             = UInt(32)                # Hardcoded in the ref. C99 code (SO1)
const NX                = UInt(scale * chunk)
const NY                = NX
const ndir              = UInt(9)
const amountof_scalar   = UInt(NX * NY)
const amountof_vector   = UInt(NX * NY * ndir)
const mem_size_scalar   = UInt(NX * NY * sizeof(ùïã))
const mem_size_vector   = UInt(NX * NY * ndir * sizeof(ùïã))
const w0                = ùïã(4.0 /  9.0)           # zero velocity weight
const ws                = ùïã(1.0 /  9.0)           # size velocity weight
const wd                = ùïã(1.0 / 36.0)           # diag velocity weight
const wi                = (w0, ws, ws, ws, ws, wd, wd, wd, wd)
const dirx              = (+0, +1, +0, -1, +0, +1, -1, -1, +1)
const diry              = (+0, +0, +1, +0, -1, +1, +1, -1, -1)

# Kinematic viscosity and parameter tau
const nu                = ùïã(1.0 / 6.0)
const tau               = ùïã(3.0 * nu + 0.5)
# const iœÑ                = inv(tau)                  # (OP2 sched'd)
# const cœÑ                = ùïã(1.0) - iœÑ               # (OP2 sched'd)

# Maximum macroscopic speed
const u_max             = ùïã(0.04 / scale)

# Fluid density
const rho0              = ùïã(1.0)

# Simulation time steps
const NSTEPS            = UInt(round(204800 / scale / scale))


#----------------------------------------------------------------------------------------------#
#                                     Auxiliary Functions                                      #
#----------------------------------------------------------------------------------------------#

"""
`scalar_index(x::UInt, y::UInt)::UInt`\n
Returns the linear index that corresponds to the 2D position [x, y] for SCALARS.
"""
scalar_index(x::UInt, y::UInt)::UInt = NX * (y - 1) + x

"""
`field_index(x::UInt, y::UInt, d::UInt)::UInt`\n
Returns the linear index that corresponds to the 2D position [x, y] for lattice FIELDS.
"""
field_index(x::UInt, y::UInt, d::UInt)::UInt = ndir * (NX * (y - 1) + x - 1) + d

"""
`taylor_green`\n
Function to compute the exact solution for Taylor-Green vortex decay
"""
function taylor_green(t::ùïã, x::UInt, y::UInt)::NTuple{3, ùïã}
    kx = ùïã(2.0 * œÄ) / NX                    # (OP2 sched'd)
    ky = ùïã(2.0 * œÄ) / NY                    # (OP2 sched'd)
    td = ùïã(1.0) / (nu * (kx*kx + ky*ky))    # (OP2 sched'd)
    X  = ùïã(x - NX / ùïã(2.0))     # Centered vortex
    Y  = ùïã(y - NY / ùïã(2.0))     # Centered vortex
    ux = - u_max * ‚àö(ky / kx) * cos(kx * X) * sin(ky * Y) * exp(-ùïã(t) / td)
    uy = + u_max * ‚àö(kx / ky) * sin(kx * X) * cos(ky * Y) * exp(-ùïã(t) / td)
    P  = - ùïã(0.25) * rho0 * u_max * u_max * ( (ky / kx) * cos(2kx * X)
                                             +(kx / ky) * sin(2ky * Y) )
    rh = rho0 + ùïã(3.0) * P
    return (rh, ux, uy)
end

function taylor_green(t::ùïã, œÅ::Vector{ùïã}, ùë¢::Vector{ùïã}, ùë£::Vector{ùïã})::Nothing
    for j in UInt(1):NY
        for i in UInt(1):NX
            ùëñ = scalar_index(i, j)
            œÅ[ùëñ], ùë¢[ùëñ], ùë£[ùëñ] = taylor_green(t, i, j)
        end
    end
end

"""
`init_equilibrium(ùëì::Vector{ùïã}, œÅ::Vector{ùïã},
                  ùë¢::Vector{ùïã}, ùë£::Vector{ùïã})::Nothing`\n
Function to initialise an equilibrium particle population `f` with provided `œÅ, ùë¢, ùë£`
macroscopic fields.
"""
function init_equilibrium(ùëì::Vector{ùïã}, œÅ::Vector{ùïã},
                          ùë¢::Vector{ùïã}, ùë£::Vector{ùïã})::Nothing
    for ùë¶ in UInt(1):NY
        for ùë• in UInt(1):NX
            i = scalar_index(ùë•, ùë¶)
            œ±, ùöû, ùöü = œÅ[i], ùë¢[i], ùë£[i]
            ùòÇùòÇ = ùöû * ùöû + ùöü * ùöü              # (OP1)
            for ùëñ in UInt(1):ndir
                ŒæùòÇ = ùïã(dirx[ùëñ] * ùöû + diry[ùëñ] * ùöü)
                ùëì[field_index(ùë•, ùë¶, ùëñ)] = wi[ùëñ] * œ± * (
                    + ùïã(1.0)
                    + ùïã(3.0) * ŒæùòÇ
                    + ùïã(4.5) * ŒæùòÇ * ŒæùòÇ
                    - ùïã(1.5) * ùòÇùòÇ
                )
            end
        end
    end
end

"""
`stream(ùëì::Vector{ùïã}, ùëî::Vector{ùïã})::Nothing`\n
Function that performs streaming of the populations in a fully periodic domain, reading from ùëì
and storing to ùëî.
"""
function stream(ùëì::Vector{ùïã}, ùëî::Vector{ùïã})::Nothing
    for ùë¶ in UInt(1):NY
        for ùë• in UInt(1):NX
            for ùëñ in UInt(1):ndir
                # "from" indices, enforcing periodicity
                ùëù = (NX + ùë• - dirx[ùëñ]) % NX + UInt(1)   # NX is added as to guarantee positivity
                ùëû = (NY + ùë¶ - diry[ùëñ]) % NY + UInt(1)   # NY is added as to guarantee positivity
                # Streaming from ùëì into ùëî
                ùëî[field_index(ùë•, ùë¶, ùëñ)] = ùëì[field_index(ùëù, ùëû, ùëñ)]
            end
        end
    end
end

"""
`compute_rho_u(ùëì::Vector{ùïã}, œÅ::Vector{ùïã},
               ùë¢::Vector{ùïã}, ùë£::Vector{ùïã})::Nothing`\n
Function that computes macroscopics from mesoscopics.
"""
function compute_rho_u(ùëì::Vector{ùïã}, œÅ::Vector{ùïã},
                       ùë¢::Vector{ùïã}, ùë£::Vector{ùïã})::Nothing
    for ùë¶ in UInt(1):NY
        for ùë• in UInt(1):NX
            # Initialize
            œ± = zero(ùïã)
            ùöû = zero(ùïã)
            ùöü = zero(ùïã)
            ùëó = scalar_index(ùë•, ùë¶)
            # Integrate
            for ùëñ in UInt(1):ndir
                œ± += ùöè = ùëì[field_index(ùë•, ùë¶, ùëñ)]
                ùöû += dirx[ùëñ] * ùöè
                ùöü += diry[ùëñ] * ùöè
            end
            # Update
            œÅ[ùëó] = œ±
            ùë¢[ùëó] = ùöû
            ùë£[ùëó] = ùöü
        end
    end
end

"""
`collide(ùëì::Vector{ùïã}, œÅ::Vector{ùïã},
         ùë¢::Vector{ùïã}, ùë£::Vector{ùïã})::Nothing`\n
Function that performs the collision operation on the particle populations using pre-computed
density and velocity values.
"""
function collide(ùëì::Vector{ùïã}, œÅ::Vector{ùïã},
                 ùë¢::Vector{ùïã}, ùë£::Vector{ùïã})::Nothing
    iœÑ = ùïã(2.0 / (6.0 * nu + 1.0))    # inverse         # (OP2 sched'd)
    cœÑ = ùïã(1.0) - iœÑ                  # complement      # (OP2 sched'd)
    for ùë¶ in UInt(1):NY
        for ùë• in UInt(1):NX
            # Initialize
            ùëó = scalar_index(ùë•, ùë¶)
            œ± = œÅ[ùëó]
            ùöû = ùë¢[ùëó]
            ùöü = ùë£[ùëó]
            ùòÇùòÇ = ùöû * ùöû + ùöü * ùöü          # (OP1)
            for ùëñ in UInt(1):ndir
                ŒæùòÇ = ùïã(dirx[ùëñ] * ùöû + diry[ùëñ] * ùöü)
                # Equilibrium
                ùëìeq = wi[ùëñ] * œ± * (
                    + ùïã(1.0)
                    + ùïã(3.0) * ŒæùòÇ
                    + ùïã(4.5) * ŒæùòÇ * ŒæùòÇ
                    - ùïã(1.5) * ùòÇùòÇ
                )
                # Relax to equilibrium
                ùëì[field_index(ùë•, ùë¶, ùëñ)] = cœÑ * ùëì[field_index(ùë•, ùë¶, ùëñ)] + iœÑ * ùëìeq
            end
        end
    end
end


#----------------------------------------------------------------------------------------------#
#                                             Main                                             #
#----------------------------------------------------------------------------------------------#

# using Format

function main(argc::Integer = length(ARGS), argv::Vector{String} = ARGS)::Integer
    # Allocate memory, without initialization
    ùëì = Vector{ùïã}(undef, amountof_vector)
    ùëî = Vector{ùïã}(undef, amountof_vector)
    œÅ = Vector{ùïã}(undef, amountof_scalar)
    ùë¢ = Vector{ùïã}(undef, amountof_scalar)
    ùë£ = Vector{ùïã}(undef, amountof_scalar)
    # Initialize œÅ, ùë¢, ùë£ with macroscopic flow
    taylor_green(zero(ùïã), œÅ, ùë¢, ùë£)
    # Initialize ùëì at equilibrium
    init_equilibrium(ùëì, œÅ, ùë¢, ùë£)
    # Main loop
    for n in 1:NSTEPS
        # Stream
        stream(ùëì, ùëî)
        # Macros
        compute_rho_u(ùëî, œÅ, ùë¢, ùë£)
        # Collide
        collide(ùëî, œÅ, ùë¢, ùë£)
        # (ùëì, ùëî) swapping
        ùëì, ùëî = ùëî, ùëì
        # PROGRESS
        # if (n % 128 == 0) || (n == NSTEPS)
        #     if (n % 8192 == 0) || (n == NSTEPS)
        #         println(format(" ({1:6d}: {2:5.1f}%)", n, ùïã(100n)/ùïã(NSTEPS)))
        #     else
        #         print(".")
        #     end
        # end 
    end
    #--------------------------------------------------------------------------#
    #    Memory de-allocation is automatically performed by julia's garbage    #
    #        collector when the ùëì, ùëî, œÅ, ùë¢, ùë£ Vectors are out of scope.        #
    #--------------------------------------------------------------------------#
    # Return
    return 0
end


